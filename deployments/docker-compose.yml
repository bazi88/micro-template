version: '3.8'

x-service-common: &service-common
  build:
    context: ..
    dockerfile: build/Dockerfile
  volumes:
    - ../config:/app/config
    - ../logs:/app/logs
  networks:
    - app_network
  deploy:
    mode: replicated
    update_config:
      parallelism: 1
      delay: 10s
    restart_policy:
      condition: on-failure
    resources:
      limits:
        cpus: '${CPU_LIMIT}'
        memory: ${MEMORY_LIMIT}
      reservations:
        cpus: '${CPU_RESERVATION}'
        memory: ${MEMORY_RESERVATION}

services:
  # Service Discovery (chỉ cho microservices mode)
  consul:
    image: consul:1.15
    ports:
      - "${CONSUL_PORT}:8500"
    command: agent -dev -client=0.0.0.0
    networks:
      - app_network
    volumes:
      - consul_data:/consul/data
    profiles:
      - microservices

  # API Gateway
  api-gateway:
    <<: *service-common
    build:
      args:
        SERVICE: gateway
        SELECTED_DOMAINS: ${SELECTED_DOMAINS}
    ports:
      - "${GATEWAY_PORT}:80"
    environment:
      - DEPLOY_MODE=${DEPLOY_MODE}
      - SELECTED_DOMAINS=${SELECTED_DOMAINS}
      - SERVICE_DISCOVERY_ENABLED=${CONSUL_ENABLED}
      - CONSUL_ENABLED=${CONSUL_ENABLED}
      - CONSUL_ADDRESS=${CONSUL_ADDRESS}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - ${DEPENDS_ON:-postgres}

  # User Service
  user-service:
    <<: *service-common
    build:
      args:
        SERVICE: user
        SELECTED_DOMAINS: ${SELECTED_DOMAINS}
    ports:
      - "${USER_SERVICE_PORT}:8081"
    environment:
      - SERVICE_NAME=user-service
      - SERVICE_HOST=${USER_SERVICE_HOST}
      - SERVICE_PORT=${USER_SERVICE_PORT}
      - DEPLOY_MODE=${DEPLOY_MODE}
      - DB_HOST=${USER_DB_HOST}
      - DB_PORT=${USER_DB_PORT}
      - DB_NAME=${USER_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${USER_REDIS_HOST}
      - REDIS_PORT=${USER_REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
    deploy:
      replicas: ${USER_REPLICAS}
    profiles:
      - user

  # Notification Service  
  notification-service:
    <<: *service-common
    build:
      args:
        SERVICE: notification
        SELECTED_DOMAINS: ${SELECTED_DOMAINS}
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:8082"
    environment:
      - SERVICE_NAME=notification-service
      - SERVICE_HOST=${NOTIFICATION_SERVICE_HOST}
      - SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
      - DEPLOY_MODE=${DEPLOY_MODE}
      - DB_HOST=${NOTIFICATION_DB_HOST}
      - DB_PORT=${NOTIFICATION_DB_PORT}
      - DB_NAME=${NOTIFICATION_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${NOTIFICATION_REDIS_HOST}
      - REDIS_PORT=${NOTIFICATION_REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
    deploy:
      replicas: ${NOTIFICATION_REPLICAS}
    profiles:
      - notification

  # Databases
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${DB_NAMES}
    volumes:
      - ./scripts/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - user
      - notification

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - user
      - notification

  # Monitoring (chỉ cho microservices mode)
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app_network
    profiles:
      - monitoring
      - microservices

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ../config/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - app_network
    profiles:
      - monitoring
      - microservices

  # Load Balancer (chỉ cho microservices mode)
  nginx:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app_network
    deploy:
      replicas: ${NGINX_REPLICAS}
    profiles:
      - microservices

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  consul_data:
  prometheus_data:
  grafana_data: 