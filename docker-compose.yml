version: '3.8'

services:
  api-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "${GATEWAY_PORT:-80}:80"
    environment:
      - GATEWAY_MODE=${GATEWAY_MODE:-standalone}
      - CONSUL_ADDRESS=${CONSUL_ADDRESS:-consul:8500}
      - API_MODE=${API_MODE:-micro}
      - AUTH_ENABLED=${AUTH_ENABLED:-false}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      - RATE_LIMIT_RPS=${RATE_LIMIT_RPS:-100}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-50}
      - CIRCUIT_BREAKER_TIMEOUT=${CIRCUIT_BREAKER_TIMEOUT:-30s}
      - CIRCUIT_BREAKER_MAX_REQUESTS=${CIRCUIT_BREAKER_MAX_REQUESTS:-3}
      - CIRCUIT_BREAKER_INTERVAL=${CIRCUIT_BREAKER_INTERVAL:-10s}
      - CIRCUIT_BREAKER_ERROR_THRESHOLD=${CIRCUIT_BREAKER_ERROR_THRESHOLD:-0.6}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
    volumes:
      - ./gateway/config:/app/config
    networks:
      - micro_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - consul
      - api
      - logging-service

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - API_MODE=${API_MODE:-micro}
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-postgres}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - MONGO_URI=${MONGO_URI:-mongodb://mongodb:27017}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      - ./config:/app/config
    networks:
      - micro_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - mongodb
      - redis

  logging-service:
    build:
      context: ./logging
      dockerfile: Dockerfile
    ports:
      - "${LOGGING_PORT:-8082}:8082"
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
    volumes:
      - ./logging/config:/app/config
    networks:
      - micro_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - elasticsearch

  consul:
    image: consul:1.15
    ports:
      - "${CONSUL_PORT:-8500}:8500"
    volumes:
      - consul_data:/consul/data
    networks:
      - micro_network
    command: agent -dev -client=0.0.0.0
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: elasticsearch:7.9.3
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - micro_network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green\\|status.*yellow'"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: kibana:7.9.3
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
    networks:
      - micro_network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - micro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME:-micro}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - micro_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - micro_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - micro_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - micro_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  micro_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  elasticsearch_data:
  grafana_data:
  prometheus_data:
  consul_data:
  redis_data:
