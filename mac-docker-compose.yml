version: '3.8'

services:
  api-gateway:
    platform: linux/arm64
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "80:80"
    environment:
      - CONSUL_HOST=consul
      - SERVICE_HOST=api-gateway
    depends_on:
      - consul
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  api:
    platform: linux/arm64
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - CONSUL_HOST=consul
      - SERVICE_HOST=api
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=forum
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://mongodb:27017
    depends_on:
      - consul
      - postgres
      - redis
      - mongodb
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  logging-service:
    platform: linux/arm64
    build:
      context: .
      dockerfile: logging-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - CONSUL_HOST=consul
      - SERVICE_HOST=logging-service
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - consul
      - elasticsearch
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  consul:
    image: consul:1.15
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.13
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - microservices

  postgres:
    image: postgres:16.1
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=forum
    ports:
      - "5432:5432"
    networks:
      - microservices
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7.0.4
    ports:
      - "27017:27017"
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis/redis-stack:7.2.0-v6
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - microservices
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices

  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    networks:
      - microservices

networks:
  microservices:
    driver: bridge
