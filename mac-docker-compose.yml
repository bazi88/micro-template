version: '3.8'

services:
  api-gateway:
    platform: linux/arm64
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_NAME=api-gateway
    depends_on:
      consul:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  api:
    platform: linux/arm64
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_NAME=api
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://mongodb:27017
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  logging-service:
    platform: linux/arm64
    build:
      context: ./logging
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_NAME=logging-service
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      consul:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  consul:
    image: hashicorp/consul:1.16
    ports:
      - "8500:8500"
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "consul", "members" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    platform: linux/arm64
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1-arm64
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    platform: linux/arm64
    image: docker.elastic.co/kibana/kibana:8.11.1-arm64
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  postgres:
    platform: linux/arm64
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    platform: linux/arm64
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    platform: linux/arm64
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis-data:/data
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    platform: linux/arm64
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - microservices
    restart: unless-stopped

  grafana:
    platform: linux/arm64
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - microservices
    restart: unless-stopped

networks:
  microservices:
    driver: bridge

volumes:
  elasticsearch-data:
    driver: local
  postgres-data:
    driver: local
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
